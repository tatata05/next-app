/* tslint:disable */
/* eslint-disable */
/**
 * KINTAI
 * 勤怠管理アプリ「KINTAI」
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface CreateAbsenceRequest
 */
export interface CreateAbsenceRequest {
  /**
   *
   * @type {number}
   * @memberof CreateAbsenceRequest
   */
  shiftId?: number;
}
/**
 *
 * @export
 * @interface CreateAdminRequest
 */
export interface CreateAdminRequest {
  /**
   *
   * @type {string}
   * @memberof CreateAdminRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateAdminRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof CreateAdminRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof CreateAdminRequest
   */
  passwordConfirmation?: string;
}
/**
 *
 * @export
 * @interface CreateEmployeeRequest
 */
export interface CreateEmployeeRequest {
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  gender?: string;
  /**
   *
   * @type {number}
   * @memberof CreateEmployeeRequest
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  phoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  emergencyPhoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEmployeeRequest
   */
  passwordConfirmation?: string;
}
/**
 *
 * @export
 * @interface CreateShiftRequest
 */
export interface CreateShiftRequest {
  /**
   *
   * @type {string}
   * @memberof CreateShiftRequest
   */
  startTime?: string;
  /**
   *
   * @type {string}
   * @memberof CreateShiftRequest
   */
  endTime?: string;
}
/**
 *
 * @export
 * @interface DeleteEmployee400Response
 */
export interface DeleteEmployee400Response {
  /**
   *
   * @type {string}
   * @memberof DeleteEmployee400Response
   */
  errorCode?: string;
  /**
   *
   * @type {string}
   * @memberof DeleteEmployee400Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetAbsenceForAdmin200Response
 */
export interface GetAbsenceForAdmin200Response {
  /**
   *
   * @type {GetAbsenceForAdmin200ResponseData}
   * @memberof GetAbsenceForAdmin200Response
   */
  data: GetAbsenceForAdmin200ResponseData;
}
/**
 *
 * @export
 * @interface GetAbsenceForAdmin200ResponseData
 */
export interface GetAbsenceForAdmin200ResponseData {
  /**
   *
   * @type {number}
   * @memberof GetAbsenceForAdmin200ResponseData
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetAbsenceForAdmin200ResponseData
   */
  status: GetAbsenceForAdmin200ResponseDataStatusEnum;
  /**
   *
   * @type {string}
   * @memberof GetAbsenceForAdmin200ResponseData
   */
  startTime?: string;
  /**
   *
   * @type {string}
   * @memberof GetAbsenceForAdmin200ResponseData
   */
  endTime?: string;
}

export const GetAbsenceForAdmin200ResponseDataStatusEnum = {
  Unapproved: "unapproved",
  Approved: "approved",
  Rejected: "rejected",
} as const;

export type GetAbsenceForAdmin200ResponseDataStatusEnum =
  (typeof GetAbsenceForAdmin200ResponseDataStatusEnum)[keyof typeof GetAbsenceForAdmin200ResponseDataStatusEnum];

/**
 *
 * @export
 * @interface GetAdmin200Response
 */
export interface GetAdmin200Response {
  /**
   *
   * @type {GetAdmins200ResponseDataInner}
   * @memberof GetAdmin200Response
   */
  data: GetAdmins200ResponseDataInner;
}
/**
 *
 * @export
 * @interface GetAdmin404Response
 */
export interface GetAdmin404Response {
  /**
   *
   * @type {string}
   * @memberof GetAdmin404Response
   */
  errorCode?: string;
  /**
   *
   * @type {string}
   * @memberof GetAdmin404Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetAdmins200Response
 */
export interface GetAdmins200Response {
  /**
   *
   * @type {Array<GetAdmins200ResponseDataInner>}
   * @memberof GetAdmins200Response
   */
  data: Array<GetAdmins200ResponseDataInner>;
  /**
   *
   * @type {GetAdmins200ResponsePagenation}
   * @memberof GetAdmins200Response
   */
  pagenation: GetAdmins200ResponsePagenation;
}
/**
 *
 * @export
 * @interface GetAdmins200ResponseDataInner
 */
export interface GetAdmins200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetAdmins200ResponseDataInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetAdmins200ResponseDataInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof GetAdmins200ResponseDataInner
   */
  email: string;
}
/**
 *
 * @export
 * @interface GetAdmins200ResponsePagenation
 */
export interface GetAdmins200ResponsePagenation {
  /**
   *
   * @type {number}
   * @memberof GetAdmins200ResponsePagenation
   */
  current?: number;
  /**
   *
   * @type {number}
   * @memberof GetAdmins200ResponsePagenation
   */
  pages?: number;
  /**
   *
   * @type {number}
   * @memberof GetAdmins200ResponsePagenation
   */
  totalCount?: number;
}
/**
 *
 * @export
 * @interface GetAdmins401Response
 */
export interface GetAdmins401Response {
  /**
   *
   * @type {string}
   * @memberof GetAdmins401Response
   */
  errorCode?: string;
  /**
   *
   * @type {string}
   * @memberof GetAdmins401Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetAdmins403Response
 */
export interface GetAdmins403Response {
  /**
   *
   * @type {string}
   * @memberof GetAdmins403Response
   */
  errorCode?: string;
  /**
   *
   * @type {string}
   * @memberof GetAdmins403Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetAdmins500Response
 */
export interface GetAdmins500Response {
  /**
   *
   * @type {string}
   * @memberof GetAdmins500Response
   */
  errorCode?: string;
  /**
   *
   * @type {string}
   * @memberof GetAdmins500Response
   */
  messages?: string;
}
/**
 *
 * @export
 * @interface GetCurrentEmployee200Response
 */
export interface GetCurrentEmployee200Response {
  /**
   *
   * @type {GetUnappliedEmployees200ResponseDataInner}
   * @memberof GetCurrentEmployee200Response
   */
  data: GetUnappliedEmployees200ResponseDataInner;
}
/**
 *
 * @export
 * @interface GetEmployee200Response
 */
export interface GetEmployee200Response {
  /**
   *
   * @type {GetEmployee200ResponseData}
   * @memberof GetEmployee200Response
   */
  data: GetEmployee200ResponseData;
}
/**
 *
 * @export
 * @interface GetEmployee200ResponseData
 */
export interface GetEmployee200ResponseData {
  /**
   *
   * @type {number}
   * @memberof GetEmployee200ResponseData
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetEmployee200ResponseData
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof GetEmployee200ResponseData
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof GetEmployee200ResponseData
   */
  gender?: string;
  /**
   *
   * @type {number}
   * @memberof GetEmployee200ResponseData
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof GetEmployee200ResponseData
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof GetEmployee200ResponseData
   */
  phoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof GetEmployee200ResponseData
   */
  emergencyPhoneNumber?: string;
}
/**
 *
 * @export
 * @interface GetEmployees200Response
 */
export interface GetEmployees200Response {
  /**
   *
   * @type {Array<GetEmployees200ResponseDataInner>}
   * @memberof GetEmployees200Response
   */
  data: Array<GetEmployees200ResponseDataInner>;
  /**
   *
   * @type {GetAdmins200ResponsePagenation}
   * @memberof GetEmployees200Response
   */
  pagenation: GetAdmins200ResponsePagenation;
}
/**
 *
 * @export
 * @interface GetEmployees200ResponseDataInner
 */
export interface GetEmployees200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetEmployees200ResponseDataInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetEmployees200ResponseDataInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof GetEmployees200ResponseDataInner
   */
  email: string;
}
/**
 *
 * @export
 * @interface GetNewAbsence200Response
 */
export interface GetNewAbsence200Response {
  /**
   *
   * @type {Array<GetNewAbsence200ResponseDataInner>}
   * @memberof GetNewAbsence200Response
   */
  data: Array<GetNewAbsence200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetNewAbsence200ResponseDataInner
 */
export interface GetNewAbsence200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetNewAbsence200ResponseDataInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetNewAbsence200ResponseDataInner
   */
  startTime: string;
  /**
   *
   * @type {string}
   * @memberof GetNewAbsence200ResponseDataInner
   */
  endTime: string;
}
/**
 *
 * @export
 * @interface GetNotificationsForAdmin200Response
 */
export interface GetNotificationsForAdmin200Response {
  /**
   *
   * @type {GetNotificationsForAdmin200ResponseData}
   * @memberof GetNotificationsForAdmin200Response
   */
  data: GetNotificationsForAdmin200ResponseData;
  /**
   *
   * @type {GetAdmins200ResponsePagenation}
   * @memberof GetNotificationsForAdmin200Response
   */
  pagenation: GetAdmins200ResponsePagenation;
}
/**
 *
 * @export
 * @interface GetNotificationsForAdmin200ResponseData
 */
export interface GetNotificationsForAdmin200ResponseData {
  /**
   *
   * @type {number}
   * @memberof GetNotificationsForAdmin200ResponseData
   */
  id: number;
  /**
   *
   * @type {boolean}
   * @memberof GetNotificationsForAdmin200ResponseData
   */
  read: boolean;
  /**
   *
   * @type {string}
   * @memberof GetNotificationsForAdmin200ResponseData
   */
  kind?: GetNotificationsForAdmin200ResponseDataKindEnum;
  /**
   *
   * @type {number}
   * @memberof GetNotificationsForAdmin200ResponseData
   */
  itemId?: number;
  /**
   *
   * @type {string}
   * @memberof GetNotificationsForAdmin200ResponseData
   */
  status: GetNotificationsForAdmin200ResponseDataStatusEnum;
  /**
   *
   * @type {GetUnappliedEmployees200ResponseDataInner}
   * @memberof GetNotificationsForAdmin200ResponseData
   */
  employee?: GetUnappliedEmployees200ResponseDataInner;
  /**
   *
   * @type {string}
   * @memberof GetNotificationsForAdmin200ResponseData
   */
  shiftTime?: string;
}

export const GetNotificationsForAdmin200ResponseDataKindEnum = {
  Shift: "shift",
  Absence: "absence",
} as const;

export type GetNotificationsForAdmin200ResponseDataKindEnum =
  (typeof GetNotificationsForAdmin200ResponseDataKindEnum)[keyof typeof GetNotificationsForAdmin200ResponseDataKindEnum];
export const GetNotificationsForAdmin200ResponseDataStatusEnum = {
  Application: "application",
  Approval: "approval",
  ApprovalPending: "approvalPending",
  Rejected: "rejected",
  Unapplied: "unapplied",
} as const;

export type GetNotificationsForAdmin200ResponseDataStatusEnum =
  (typeof GetNotificationsForAdmin200ResponseDataStatusEnum)[keyof typeof GetNotificationsForAdmin200ResponseDataStatusEnum];

/**
 *
 * @export
 * @interface GetNotificationsForEmployee200Response
 */
export interface GetNotificationsForEmployee200Response {
  /**
   *
   * @type {GetNotificationsForEmployee200ResponseData}
   * @memberof GetNotificationsForEmployee200Response
   */
  data: GetNotificationsForEmployee200ResponseData;
  /**
   *
   * @type {GetAdmins200ResponsePagenation}
   * @memberof GetNotificationsForEmployee200Response
   */
  pagenation: GetAdmins200ResponsePagenation;
}
/**
 *
 * @export
 * @interface GetNotificationsForEmployee200ResponseData
 */
export interface GetNotificationsForEmployee200ResponseData {
  /**
   *
   * @type {number}
   * @memberof GetNotificationsForEmployee200ResponseData
   */
  id: number;
  /**
   *
   * @type {boolean}
   * @memberof GetNotificationsForEmployee200ResponseData
   */
  read: boolean;
  /**
   *
   * @type {string}
   * @memberof GetNotificationsForEmployee200ResponseData
   */
  kind?: GetNotificationsForEmployee200ResponseDataKindEnum;
  /**
   *
   * @type {number}
   * @memberof GetNotificationsForEmployee200ResponseData
   */
  itemId?: number;
  /**
   *
   * @type {string}
   * @memberof GetNotificationsForEmployee200ResponseData
   */
  status: GetNotificationsForEmployee200ResponseDataStatusEnum;
  /**
   *
   * @type {string}
   * @memberof GetNotificationsForEmployee200ResponseData
   */
  shiftTime?: string;
}

export const GetNotificationsForEmployee200ResponseDataKindEnum = {
  Shift: "shift",
  Absence: "absence",
} as const;

export type GetNotificationsForEmployee200ResponseDataKindEnum =
  (typeof GetNotificationsForEmployee200ResponseDataKindEnum)[keyof typeof GetNotificationsForEmployee200ResponseDataKindEnum];
export const GetNotificationsForEmployee200ResponseDataStatusEnum = {
  Application: "application",
  Approval: "approval",
  ApprovalPending: "approvalPending",
  Rejected: "rejected",
  Unapplied: "unapplied",
} as const;

export type GetNotificationsForEmployee200ResponseDataStatusEnum =
  (typeof GetNotificationsForEmployee200ResponseDataStatusEnum)[keyof typeof GetNotificationsForEmployee200ResponseDataStatusEnum];

/**
 *
 * @export
 * @interface GetShiftForAdmin200Response
 */
export interface GetShiftForAdmin200Response {
  /**
   *
   * @type {GetShiftsForAdmin200ResponseDataInner}
   * @memberof GetShiftForAdmin200Response
   */
  data: GetShiftsForAdmin200ResponseDataInner;
}
/**
 *
 * @export
 * @interface GetShiftForEmployee200Response
 */
export interface GetShiftForEmployee200Response {
  /**
   *
   * @type {GetShiftsForEmployee200ResponseDataInner}
   * @memberof GetShiftForEmployee200Response
   */
  data: GetShiftsForEmployee200ResponseDataInner;
}
/**
 *
 * @export
 * @interface GetShiftsForAdmin200Response
 */
export interface GetShiftsForAdmin200Response {
  /**
   *
   * @type {Array<GetShiftsForAdmin200ResponseDataInner>}
   * @memberof GetShiftsForAdmin200Response
   */
  data: Array<GetShiftsForAdmin200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetShiftsForAdmin200ResponseDataInner
 */
export interface GetShiftsForAdmin200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetShiftsForAdmin200ResponseDataInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetShiftsForAdmin200ResponseDataInner
   */
  startTime: string;
  /**
   *
   * @type {string}
   * @memberof GetShiftsForAdmin200ResponseDataInner
   */
  endTime: string;
  /**
   *
   * @type {string}
   * @memberof GetShiftsForAdmin200ResponseDataInner
   */
  status: GetShiftsForAdmin200ResponseDataInnerStatusEnum;
  /**
   *
   * @type {number}
   * @memberof GetShiftsForAdmin200ResponseDataInner
   */
  absenceId?: number;
  /**
   *
   * @type {GetUnappliedEmployees200ResponseDataInner}
   * @memberof GetShiftsForAdmin200ResponseDataInner
   */
  employee: GetUnappliedEmployees200ResponseDataInner;
}

export const GetShiftsForAdmin200ResponseDataInnerStatusEnum = {
  Unapproved: "unapproved",
  Approved: "approved",
  AbsenceApplication: "absenceApplication",
} as const;

export type GetShiftsForAdmin200ResponseDataInnerStatusEnum =
  (typeof GetShiftsForAdmin200ResponseDataInnerStatusEnum)[keyof typeof GetShiftsForAdmin200ResponseDataInnerStatusEnum];

/**
 *
 * @export
 * @interface GetShiftsForEmployee200Response
 */
export interface GetShiftsForEmployee200Response {
  /**
   *
   * @type {Array<GetShiftsForEmployee200ResponseDataInner>}
   * @memberof GetShiftsForEmployee200Response
   */
  data: Array<GetShiftsForEmployee200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetShiftsForEmployee200ResponseDataInner
 */
export interface GetShiftsForEmployee200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetShiftsForEmployee200ResponseDataInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetShiftsForEmployee200ResponseDataInner
   */
  startTime: string;
  /**
   *
   * @type {string}
   * @memberof GetShiftsForEmployee200ResponseDataInner
   */
  endTime: string;
  /**
   *
   * @type {string}
   * @memberof GetShiftsForEmployee200ResponseDataInner
   */
  status: GetShiftsForEmployee200ResponseDataInnerStatusEnum;
  /**
   *
   * @type {number}
   * @memberof GetShiftsForEmployee200ResponseDataInner
   */
  absenceId?: number;
}

export const GetShiftsForEmployee200ResponseDataInnerStatusEnum = {
  Unapproved: "unapproved",
  Approved: "approved",
  AbsenceApplication: "absenceApplication",
} as const;

export type GetShiftsForEmployee200ResponseDataInnerStatusEnum =
  (typeof GetShiftsForEmployee200ResponseDataInnerStatusEnum)[keyof typeof GetShiftsForEmployee200ResponseDataInnerStatusEnum];

/**
 *
 * @export
 * @interface GetUnappliedEmployees200Response
 */
export interface GetUnappliedEmployees200Response {
  /**
   *
   * @type {Array<GetUnappliedEmployees200ResponseDataInner>}
   * @memberof GetUnappliedEmployees200Response
   */
  data: Array<GetUnappliedEmployees200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetUnappliedEmployees200ResponseDataInner
 */
export interface GetUnappliedEmployees200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetUnappliedEmployees200ResponseDataInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetUnappliedEmployees200ResponseDataInner
   */
  name: string;
}
/**
 *
 * @export
 * @interface SignInAdmin201Response
 */
export interface SignInAdmin201Response {
  /**
   *
   * @type {SignInAdmin201ResponseData}
   * @memberof SignInAdmin201Response
   */
  data: SignInAdmin201ResponseData;
}
/**
 *
 * @export
 * @interface SignInAdmin201ResponseData
 */
export interface SignInAdmin201ResponseData {
  /**
   *
   * @type {string}
   * @memberof SignInAdmin201ResponseData
   */
  uid: string;
  /**
   *
   * @type {string}
   * @memberof SignInAdmin201ResponseData
   */
  accessToken: string;
  /**
   *
   * @type {string}
   * @memberof SignInAdmin201ResponseData
   */
  client: string;
}
/**
 *
 * @export
 * @interface SignInAdminRequest
 */
export interface SignInAdminRequest {
  /**
   *
   * @type {string}
   * @memberof SignInAdminRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof SignInAdminRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface UpdateAdminRequest
 */
export interface UpdateAdminRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateAdminRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAdminRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAdminRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAdminRequest
   */
  passwordConfirmation?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAdminRequest
   */
  currentPassword?: string;
}
/**
 *
 * @export
 * @interface UpdateEmployeeRequest
 */
export interface UpdateEmployeeRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  gender?: string;
  /**
   *
   * @type {number}
   * @memberof UpdateEmployeeRequest
   */
  age?: number;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  phoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  emergencyPhoneNumber?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  passwordConfirmation?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEmployeeRequest
   */
  currentPassword?: string;
}
/**
 *
 * @export
 * @interface UpdateShiftStatusRequest
 */
export interface UpdateShiftStatusRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateShiftStatusRequest
   */
  status?: UpdateShiftStatusRequestStatusEnum;
}

export const UpdateShiftStatusRequestStatusEnum = {
  Approved: "approved",
  Rejected: "rejected",
} as const;

export type UpdateShiftStatusRequestStatusEnum =
  (typeof UpdateShiftStatusRequestStatusEnum)[keyof typeof UpdateShiftStatusRequestStatusEnum];

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 従業員削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmployee: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteEmployee", "id", id);
      const localVarPath = `/api/v1/admin/employees/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 欠勤詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbsenceForAdmin: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getAbsenceForAdmin", "id", id);
      const localVarPath = `/api/v1/admin/absences/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理者詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmin: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getAdmin", "id", id);
      const localVarPath = `/api/v1/admin/admins/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 全ての管理者の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmins: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/admins`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ログインしている管理者の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentAdmin: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/admins/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 従業員詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployee: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getEmployee", "id", id);
      const localVarPath = `/api/v1/admin/employees/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 全ての従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployees: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/employees`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 全ての通知の取得
     * @param {boolean} [read]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationsForAdmin: async (
      read?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/notifications`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      if (read !== undefined) {
        localVarQueryParameter["read"] = read;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフト詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftForAdmin: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getShiftForAdmin", "id", id);
      const localVarPath = `/api/v1/admin/shifts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフトカレンダー関連の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftsForAdmin: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/shifts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフト未申請従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnappliedEmployees: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/employees/unapplied_employees`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 欠勤ステータスの変更
     * @param {number} id
     * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAbsenceStatus: async (
      id: number,
      updateShiftStatusRequest: UpdateShiftStatusRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateAbsenceStatus", "id", id);
      // verify required parameter 'updateShiftStatusRequest' is not null or undefined
      assertParamExists(
        "updateAbsenceStatus",
        "updateShiftStatusRequest",
        updateShiftStatusRequest,
      );
      const localVarPath = `/api/v1/admin/absences/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateShiftStatusRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 通知の既読/未読の変更
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationForAdmin: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateNotificationForAdmin", "id", id);
      const localVarPath = `/api/v1/admin/notifications/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフトステータスの変更
     * @param {number} id
     * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShiftStatus: async (
      id: number,
      updateShiftStatusRequest: UpdateShiftStatusRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateShiftStatus", "id", id);
      // verify required parameter 'updateShiftStatusRequest' is not null or undefined
      assertParamExists(
        "updateShiftStatus",
        "updateShiftStatusRequest",
        updateShiftStatusRequest,
      );
      const localVarPath = `/api/v1/admin/shifts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateShiftStatusRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 従業員削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEmployee(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.deleteEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 欠勤詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAbsenceForAdmin(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAbsenceForAdmin200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAbsenceForAdmin(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getAbsenceForAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理者詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAdmin(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAdmin200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmin(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 全ての管理者の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAdmins(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAdmins200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmins(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getAdmins"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary ログインしている管理者の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentAdmin(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAdmin200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentAdmin(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getCurrentAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 従業員詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployee(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetEmployee200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 全ての従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployees(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetEmployees200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployees(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getEmployees"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 全ての通知の取得
     * @param {boolean} [read]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNotificationsForAdmin(
      read?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetNotificationsForAdmin200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getNotificationsForAdmin(read, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getNotificationsForAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフト詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShiftForAdmin(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetShiftForAdmin200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getShiftForAdmin(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getShiftForAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフトカレンダー関連の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShiftsForAdmin(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetShiftsForAdmin200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getShiftsForAdmin(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getShiftsForAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフト未申請従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUnappliedEmployees(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetUnappliedEmployees200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUnappliedEmployees(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.getUnappliedEmployees"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 欠勤ステータスの変更
     * @param {number} id
     * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAbsenceStatus(
      id: number,
      updateShiftStatusRequest: UpdateShiftStatusRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateAbsenceStatus(
          id,
          updateShiftStatusRequest,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.updateAbsenceStatus"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 通知の既読/未読の変更
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNotificationForAdmin(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateNotificationForAdmin(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.updateNotificationForAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフトステータスの変更
     * @param {number} id
     * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateShiftStatus(
      id: number,
      updateShiftStatusRequest: UpdateShiftStatusRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateShiftStatus(
          id,
          updateShiftStatusRequest,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AdminApi.updateShiftStatus"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminApiFp(configuration);
  return {
    /**
     *
     * @summary 従業員削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmployee(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteEmployee(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 欠勤詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbsenceForAdmin(
      id: number,
      options?: any,
    ): AxiosPromise<GetAbsenceForAdmin200Response> {
      return localVarFp
        .getAbsenceForAdmin(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理者詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmin(id: number, options?: any): AxiosPromise<GetAdmin200Response> {
      return localVarFp
        .getAdmin(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 全ての管理者の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmins(options?: any): AxiosPromise<GetAdmins200Response> {
      return localVarFp
        .getAdmins(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ログインしている管理者の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentAdmin(options?: any): AxiosPromise<GetAdmin200Response> {
      return localVarFp
        .getCurrentAdmin(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 従業員詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployee(
      id: number,
      options?: any,
    ): AxiosPromise<GetEmployee200Response> {
      return localVarFp
        .getEmployee(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 全ての従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployees(options?: any): AxiosPromise<GetEmployees200Response> {
      return localVarFp
        .getEmployees(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 全ての通知の取得
     * @param {boolean} [read]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationsForAdmin(
      read?: boolean,
      options?: any,
    ): AxiosPromise<GetNotificationsForAdmin200Response> {
      return localVarFp
        .getNotificationsForAdmin(read, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフト詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftForAdmin(
      id: number,
      options?: any,
    ): AxiosPromise<GetShiftForAdmin200Response> {
      return localVarFp
        .getShiftForAdmin(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフトカレンダー関連の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftsForAdmin(
      options?: any,
    ): AxiosPromise<GetShiftsForAdmin200Response> {
      return localVarFp
        .getShiftsForAdmin(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフト未申請従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnappliedEmployees(
      options?: any,
    ): AxiosPromise<GetUnappliedEmployees200Response> {
      return localVarFp
        .getUnappliedEmployees(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 欠勤ステータスの変更
     * @param {number} id
     * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAbsenceStatus(
      id: number,
      updateShiftStatusRequest: UpdateShiftStatusRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateAbsenceStatus(id, updateShiftStatusRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 通知の既読/未読の変更
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationForAdmin(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .updateNotificationForAdmin(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフトステータスの変更
     * @param {number} id
     * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShiftStatus(
      id: number,
      updateShiftStatusRequest: UpdateShiftStatusRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateShiftStatus(id, updateShiftStatusRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   *
   * @summary 従業員削除
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public deleteEmployee(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .deleteEmployee(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 欠勤詳細の取得
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getAbsenceForAdmin(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getAbsenceForAdmin(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理者詳細の取得
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getAdmin(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getAdmin(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 全ての管理者の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getAdmins(options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getAdmins(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ログインしている管理者の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getCurrentAdmin(options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getCurrentAdmin(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 従業員詳細の取得
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getEmployee(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getEmployee(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 全ての従業員の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getEmployees(options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getEmployees(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 全ての通知の取得
   * @param {boolean} [read]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getNotificationsForAdmin(
    read?: boolean,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .getNotificationsForAdmin(read, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフト詳細の取得
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getShiftForAdmin(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getShiftForAdmin(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフトカレンダー関連の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getShiftsForAdmin(options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getShiftsForAdmin(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフト未申請従業員の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getUnappliedEmployees(options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getUnappliedEmployees(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 欠勤ステータスの変更
   * @param {number} id
   * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public updateAbsenceStatus(
    id: number,
    updateShiftStatusRequest: UpdateShiftStatusRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .updateAbsenceStatus(id, updateShiftStatusRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 通知の既読/未読の変更
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public updateNotificationForAdmin(id: number, options?: AxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .updateNotificationForAdmin(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフトステータスの変更
   * @param {number} id
   * @param {UpdateShiftStatusRequest} updateShiftStatusRequest ステータス情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public updateShiftStatus(
    id: number,
    updateShiftStatusRequest: UpdateShiftStatusRequest,
    options?: AxiosRequestConfig,
  ) {
    return AdminApiFp(this.configuration)
      .updateShiftStatus(id, updateShiftStatusRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 管理者作成
     * @param {CreateAdminRequest} createAdminRequest 管理者登録情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAdmin: async (
      createAdminRequest: CreateAdminRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createAdminRequest' is not null or undefined
      assertParamExists(
        "createAdmin",
        "createAdminRequest",
        createAdminRequest,
      );
      const localVarPath = `/api/v1/admin_auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAdminRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 従業員作成
     * @param {CreateEmployeeRequest} createEmployeeRequest 従業員登録情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee: async (
      createEmployeeRequest: CreateEmployeeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createEmployeeRequest' is not null or undefined
      assertParamExists(
        "createEmployee",
        "createEmployeeRequest",
        createEmployeeRequest,
      );
      const localVarPath = `/api/v1/employee_auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEmployeeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理者削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdmin: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin_auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理者ログイン
     * @param {SignInAdminRequest} signInAdminRequest 管理者ログイン情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signInAdmin: async (
      signInAdminRequest: SignInAdminRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signInAdminRequest' is not null or undefined
      assertParamExists(
        "signInAdmin",
        "signInAdminRequest",
        signInAdminRequest,
      );
      const localVarPath = `/api/v1/admin_auth/sign_in`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signInAdminRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 従業員ログイン
     * @param {SignInAdminRequest} signInAdminRequest 従業員ログイン情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signInEmployee: async (
      signInAdminRequest: SignInAdminRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signInAdminRequest' is not null or undefined
      assertParamExists(
        "signInEmployee",
        "signInAdminRequest",
        signInAdminRequest,
      );
      const localVarPath = `/api/v1/employee_auth/sign_in`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signInAdminRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理者ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signOutAdmin: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin_auth/sign_out`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 従業員ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signOutEmployee: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employee_auth/sign_out`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理者編集
     * @param {UpdateAdminRequest} updateAdminRequest 管理者編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAdmin: async (
      updateAdminRequest: UpdateAdminRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateAdminRequest' is not null or undefined
      assertParamExists(
        "updateAdmin",
        "updateAdminRequest",
        updateAdminRequest,
      );
      const localVarPath = `/api/v1/admin_auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAdminRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 従業員編集
     * @param {UpdateEmployeeRequest} updateEmployeeRequest 従業員編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee: async (
      updateEmployeeRequest: UpdateEmployeeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateEmployeeRequest' is not null or undefined
      assertParamExists(
        "updateEmployee",
        "updateEmployeeRequest",
        updateEmployeeRequest,
      );
      const localVarPath = `/api/v1/employee_auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateEmployeeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 管理者作成
     * @param {CreateAdminRequest} createAdminRequest 管理者登録情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAdmin(
      createAdminRequest: CreateAdminRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAdmin(
        createAdminRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.createAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 従業員作成
     * @param {CreateEmployeeRequest} createEmployeeRequest 従業員登録情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEmployee(
      createEmployeeRequest: CreateEmployeeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(
        createEmployeeRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.createEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理者削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAdmin(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmin(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.deleteAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理者ログイン
     * @param {SignInAdminRequest} signInAdminRequest 管理者ログイン情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signInAdmin(
      signInAdminRequest: SignInAdminRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<SignInAdmin201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signInAdmin(
        signInAdminRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.signInAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 従業員ログイン
     * @param {SignInAdminRequest} signInAdminRequest 従業員ログイン情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signInEmployee(
      signInAdminRequest: SignInAdminRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<SignInAdmin201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signInEmployee(
        signInAdminRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.signInEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理者ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signOutAdmin(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signOutAdmin(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.signOutAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 従業員ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signOutEmployee(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signOutEmployee(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.signOutEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理者編集
     * @param {UpdateAdminRequest} updateAdminRequest 管理者編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAdmin(
      updateAdminRequest: UpdateAdminRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdmin(
        updateAdminRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.updateAdmin"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 従業員編集
     * @param {UpdateEmployeeRequest} updateEmployeeRequest 従業員編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateEmployee(
      updateEmployeeRequest: UpdateEmployeeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(
        updateEmployeeRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["AuthApi.updateEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary 管理者作成
     * @param {CreateAdminRequest} createAdminRequest 管理者登録情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAdmin(
      createAdminRequest: CreateAdminRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createAdmin(createAdminRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 従業員作成
     * @param {CreateEmployeeRequest} createEmployeeRequest 従業員登録情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployee(
      createEmployeeRequest: CreateEmployeeRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createEmployee(createEmployeeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理者削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdmin(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteAdmin(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理者ログイン
     * @param {SignInAdminRequest} signInAdminRequest 管理者ログイン情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signInAdmin(
      signInAdminRequest: SignInAdminRequest,
      options?: any,
    ): AxiosPromise<SignInAdmin201Response> {
      return localVarFp
        .signInAdmin(signInAdminRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 従業員ログイン
     * @param {SignInAdminRequest} signInAdminRequest 従業員ログイン情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signInEmployee(
      signInAdminRequest: SignInAdminRequest,
      options?: any,
    ): AxiosPromise<SignInAdmin201Response> {
      return localVarFp
        .signInEmployee(signInAdminRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理者ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signOutAdmin(options?: any): AxiosPromise<void> {
      return localVarFp
        .signOutAdmin(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 従業員ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signOutEmployee(options?: any): AxiosPromise<void> {
      return localVarFp
        .signOutEmployee(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理者編集
     * @param {UpdateAdminRequest} updateAdminRequest 管理者編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAdmin(
      updateAdminRequest: UpdateAdminRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateAdmin(updateAdminRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 従業員編集
     * @param {UpdateEmployeeRequest} updateEmployeeRequest 従業員編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmployee(
      updateEmployeeRequest: UpdateEmployeeRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateEmployee(updateEmployeeRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary 管理者作成
   * @param {CreateAdminRequest} createAdminRequest 管理者登録情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public createAdmin(
    createAdminRequest: CreateAdminRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .createAdmin(createAdminRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 従業員作成
   * @param {CreateEmployeeRequest} createEmployeeRequest 従業員登録情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public createEmployee(
    createEmployeeRequest: CreateEmployeeRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .createEmployee(createEmployeeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理者削除
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public deleteAdmin(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .deleteAdmin(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理者ログイン
   * @param {SignInAdminRequest} signInAdminRequest 管理者ログイン情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public signInAdmin(
    signInAdminRequest: SignInAdminRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .signInAdmin(signInAdminRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 従業員ログイン
   * @param {SignInAdminRequest} signInAdminRequest 従業員ログイン情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public signInEmployee(
    signInAdminRequest: SignInAdminRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .signInEmployee(signInAdminRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理者ログアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public signOutAdmin(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .signOutAdmin(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 従業員ログアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public signOutEmployee(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .signOutEmployee(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理者編集
   * @param {UpdateAdminRequest} updateAdminRequest 管理者編集情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public updateAdmin(
    updateAdminRequest: UpdateAdminRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .updateAdmin(updateAdminRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 従業員編集
   * @param {UpdateEmployeeRequest} updateEmployeeRequest 従業員編集情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public updateEmployee(
    updateEmployeeRequest: UpdateEmployeeRequest,
    options?: AxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .updateEmployee(updateEmployeeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 欠勤申請の作成
     * @param {CreateAbsenceRequest} createAbsenceRequest 欠勤申請情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAbsence: async (
      createAbsenceRequest: CreateAbsenceRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createAbsenceRequest' is not null or undefined
      assertParamExists(
        "createAbsence",
        "createAbsenceRequest",
        createAbsenceRequest,
      );
      const localVarPath = `/api/v1/employee/absences`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAbsenceRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフト申請の作成
     * @param {CreateShiftRequest} createShiftRequest シフト申請情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift: async (
      createShiftRequest: CreateShiftRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createShiftRequest' is not null or undefined
      assertParamExists(
        "createShift",
        "createShiftRequest",
        createShiftRequest,
      );
      const localVarPath = `/api/v1/employee/shifts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShiftRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 欠勤申請の削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAbsence: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteAbsence", "id", id);
      const localVarPath = `/api/v1/employee/absences/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフト申請の削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteShift", "id", id);
      const localVarPath = `/api/v1/employee/shifts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 欠勤詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbsenceForEmployee: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getAbsenceForEmployee", "id", id);
      const localVarPath = `/api/v1/employee/absences/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ログインしている従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentEmployee: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employee/mypage/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary マイページ情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMypage: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employee/mypage`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 欠勤申請可能なシフトの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNewAbsence: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employee/absences/new`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 全ての通知の取得
     * @param {boolean} [read]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationsForEmployee: async (
      read?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employee/notifications`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      if (read !== undefined) {
        localVarQueryParameter["read"] = read;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフト詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftForEmployee: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getShiftForEmployee", "id", id);
      const localVarPath = `/api/v1/employee/shifts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフトカレンダー関連の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftsForEmployee: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employee/shifts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 通知の既読/未読の変更
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationForEmployee: async (
      id: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateNotificationForEmployee", "id", id);
      const localVarPath = `/api/v1/employee/notifications/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary シフト申請の編集
     * @param {number} id
     * @param {CreateShiftRequest} createShiftRequest シフト編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift: async (
      id: number,
      createShiftRequest: CreateShiftRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateShift", "id", id);
      // verify required parameter 'createShiftRequest' is not null or undefined
      assertParamExists(
        "updateShift",
        "createShiftRequest",
        createShiftRequest,
      );
      const localVarPath = `/api/v1/employee/shifts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication uid required
      await setApiKeyToObject(localVarHeaderParameter, "uid", configuration);

      // authentication client required
      await setApiKeyToObject(localVarHeaderParameter, "client", configuration);

      // authentication accessToken required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "accessToken",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShiftRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 欠勤申請の作成
     * @param {CreateAbsenceRequest} createAbsenceRequest 欠勤申請情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAbsence(
      createAbsenceRequest: CreateAbsenceRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAbsence(
        createAbsenceRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.createAbsence"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフト申請の作成
     * @param {CreateShiftRequest} createShiftRequest シフト申請情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createShift(
      createShiftRequest: CreateShiftRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createShift(
        createShiftRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.createShift"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 欠勤申請の削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAbsence(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAbsence(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.deleteAbsence"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフト申請の削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteShift(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShift(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.deleteShift"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 欠勤詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAbsenceForEmployee(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetAbsenceForAdmin200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAbsenceForEmployee(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.getAbsenceForEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary ログインしている従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentEmployee(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetCurrentEmployee200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentEmployee(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.getCurrentEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary マイページ情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMypage(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetEmployee200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMypage(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.getMypage"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 欠勤申請可能なシフトの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNewAbsence(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetNewAbsence200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getNewAbsence(
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.getNewAbsence"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 全ての通知の取得
     * @param {boolean} [read]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNotificationsForEmployee(
      read?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetNotificationsForEmployee200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getNotificationsForEmployee(
          read,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.getNotificationsForEmployee"]?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフト詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShiftForEmployee(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetShiftForEmployee200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getShiftForEmployee(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.getShiftForEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフトカレンダー関連の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShiftsForEmployee(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetShiftsForEmployee200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getShiftsForEmployee(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.getShiftsForEmployee"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 通知の既読/未読の変更
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNotificationForEmployee(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateNotificationForEmployee(
          id,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.updateNotificationForEmployee"]?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary シフト申請の編集
     * @param {number} id
     * @param {CreateShiftRequest} createShiftRequest シフト編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateShift(
      id: number,
      createShiftRequest: CreateShiftRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateShift(
        id,
        createShiftRequest,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["EmployeeApi.updateShift"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = EmployeeApiFp(configuration);
  return {
    /**
     *
     * @summary 欠勤申請の作成
     * @param {CreateAbsenceRequest} createAbsenceRequest 欠勤申請情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAbsence(
      createAbsenceRequest: CreateAbsenceRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createAbsence(createAbsenceRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフト申請の作成
     * @param {CreateShiftRequest} createShiftRequest シフト申請情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShift(
      createShiftRequest: CreateShiftRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .createShift(createShiftRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 欠勤申請の削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAbsence(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteAbsence(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフト申請の削除
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShift(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteShift(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 欠勤詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbsenceForEmployee(
      id: number,
      options?: any,
    ): AxiosPromise<GetAbsenceForAdmin200Response> {
      return localVarFp
        .getAbsenceForEmployee(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ログインしている従業員の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentEmployee(
      options?: any,
    ): AxiosPromise<GetCurrentEmployee200Response> {
      return localVarFp
        .getCurrentEmployee(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary マイページ情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMypage(options?: any): AxiosPromise<GetEmployee200Response> {
      return localVarFp
        .getMypage(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 欠勤申請可能なシフトの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNewAbsence(options?: any): AxiosPromise<GetNewAbsence200Response> {
      return localVarFp
        .getNewAbsence(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 全ての通知の取得
     * @param {boolean} [read]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationsForEmployee(
      read?: boolean,
      options?: any,
    ): AxiosPromise<GetNotificationsForEmployee200Response> {
      return localVarFp
        .getNotificationsForEmployee(read, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフト詳細の取得
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftForEmployee(
      id: number,
      options?: any,
    ): AxiosPromise<GetShiftForEmployee200Response> {
      return localVarFp
        .getShiftForEmployee(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフトカレンダー関連の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShiftsForEmployee(
      options?: any,
    ): AxiosPromise<GetShiftsForEmployee200Response> {
      return localVarFp
        .getShiftsForEmployee(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 通知の既読/未読の変更
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationForEmployee(
      id: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateNotificationForEmployee(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary シフト申請の編集
     * @param {number} id
     * @param {CreateShiftRequest} createShiftRequest シフト編集情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateShift(
      id: number,
      createShiftRequest: CreateShiftRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateShift(id, createShiftRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
  /**
   *
   * @summary 欠勤申請の作成
   * @param {CreateAbsenceRequest} createAbsenceRequest 欠勤申請情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public createAbsence(
    createAbsenceRequest: CreateAbsenceRequest,
    options?: AxiosRequestConfig,
  ) {
    return EmployeeApiFp(this.configuration)
      .createAbsence(createAbsenceRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフト申請の作成
   * @param {CreateShiftRequest} createShiftRequest シフト申請情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public createShift(
    createShiftRequest: CreateShiftRequest,
    options?: AxiosRequestConfig,
  ) {
    return EmployeeApiFp(this.configuration)
      .createShift(createShiftRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 欠勤申請の削除
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public deleteAbsence(id: number, options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .deleteAbsence(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフト申請の削除
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public deleteShift(id: number, options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .deleteShift(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 欠勤詳細の取得
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getAbsenceForEmployee(id: number, options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .getAbsenceForEmployee(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ログインしている従業員の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getCurrentEmployee(options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .getCurrentEmployee(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary マイページ情報の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getMypage(options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .getMypage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 欠勤申請可能なシフトの取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getNewAbsence(options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .getNewAbsence(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 全ての通知の取得
   * @param {boolean} [read]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getNotificationsForEmployee(
    read?: boolean,
    options?: AxiosRequestConfig,
  ) {
    return EmployeeApiFp(this.configuration)
      .getNotificationsForEmployee(read, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフト詳細の取得
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getShiftForEmployee(id: number, options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .getShiftForEmployee(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフトカレンダー関連の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public getShiftsForEmployee(options?: AxiosRequestConfig) {
    return EmployeeApiFp(this.configuration)
      .getShiftsForEmployee(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 通知の既読/未読の変更
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public updateNotificationForEmployee(
    id: number,
    options?: AxiosRequestConfig,
  ) {
    return EmployeeApiFp(this.configuration)
      .updateNotificationForEmployee(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary シフト申請の編集
   * @param {number} id
   * @param {CreateShiftRequest} createShiftRequest シフト編集情報
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployeeApi
   */
  public updateShift(
    id: number,
    createShiftRequest: CreateShiftRequest,
    options?: AxiosRequestConfig,
  ) {
    return EmployeeApiFp(this.configuration)
      .updateShift(id, createShiftRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
